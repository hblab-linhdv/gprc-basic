// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: proto/route_guide.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteServiceClient is the client API for RouteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteServiceClient interface {
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (RouteService_ListFeaturesClient, error)
	GetRecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteService_GetRecordRouteClient, error)
	GetRouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteService_GetRouteChatClient, error)
}

type routeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteServiceClient(cc grpc.ClientConnInterface) RouteServiceClient {
	return &routeServiceClient{cc}
}

func (c *routeServiceClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/proto.RouteService/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeServiceClient) ListFeatures(ctx context.Context, in *Rectangle, opts ...grpc.CallOption) (RouteService_ListFeaturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteService_ServiceDesc.Streams[0], "/proto.RouteService/ListFeatures", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeServiceListFeaturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteService_ListFeaturesClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type routeServiceListFeaturesClient struct {
	grpc.ClientStream
}

func (x *routeServiceListFeaturesClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeServiceClient) GetRecordRoute(ctx context.Context, opts ...grpc.CallOption) (RouteService_GetRecordRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteService_ServiceDesc.Streams[1], "/proto.RouteService/GetRecordRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeServiceGetRecordRouteClient{stream}
	return x, nil
}

type RouteService_GetRecordRouteClient interface {
	Send(*Point) error
	CloseAndRecv() (*RouteSummary, error)
	grpc.ClientStream
}

type routeServiceGetRecordRouteClient struct {
	grpc.ClientStream
}

func (x *routeServiceGetRecordRouteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeServiceGetRecordRouteClient) CloseAndRecv() (*RouteSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RouteSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeServiceClient) GetRouteChat(ctx context.Context, opts ...grpc.CallOption) (RouteService_GetRouteChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteService_ServiceDesc.Streams[2], "/proto.RouteService/GetRouteChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeServiceGetRouteChatClient{stream}
	return x, nil
}

type RouteService_GetRouteChatClient interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ClientStream
}

type routeServiceGetRouteChatClient struct {
	grpc.ClientStream
}

func (x *routeServiceGetRouteChatClient) Send(m *RouteNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeServiceGetRouteChatClient) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteServiceServer is the server API for RouteService service.
// All implementations must embed UnimplementedRouteServiceServer
// for forward compatibility
type RouteServiceServer interface {
	GetFeature(context.Context, *Point) (*Feature, error)
	ListFeatures(*Rectangle, RouteService_ListFeaturesServer) error
	GetRecordRoute(RouteService_GetRecordRouteServer) error
	GetRouteChat(RouteService_GetRouteChatServer) error
	mustEmbedUnimplementedRouteServiceServer()
}

// UnimplementedRouteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRouteServiceServer struct {
}

func (UnimplementedRouteServiceServer) GetFeature(context.Context, *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedRouteServiceServer) ListFeatures(*Rectangle, RouteService_ListFeaturesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedRouteServiceServer) GetRecordRoute(RouteService_GetRecordRouteServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRecordRoute not implemented")
}
func (UnimplementedRouteServiceServer) GetRouteChat(RouteService_GetRouteChatServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRouteChat not implemented")
}
func (UnimplementedRouteServiceServer) mustEmbedUnimplementedRouteServiceServer() {}

// UnsafeRouteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteServiceServer will
// result in compilation errors.
type UnsafeRouteServiceServer interface {
	mustEmbedUnimplementedRouteServiceServer()
}

func RegisterRouteServiceServer(s grpc.ServiceRegistrar, srv RouteServiceServer) {
	s.RegisterService(&RouteService_ServiceDesc, srv)
}

func _RouteService_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteServiceServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RouteService/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteServiceServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteService_ListFeatures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Rectangle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteServiceServer).ListFeatures(m, &routeServiceListFeaturesServer{stream})
}

type RouteService_ListFeaturesServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type routeServiceListFeaturesServer struct {
	grpc.ServerStream
}

func (x *routeServiceListFeaturesServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _RouteService_GetRecordRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteServiceServer).GetRecordRoute(&routeServiceGetRecordRouteServer{stream})
}

type RouteService_GetRecordRouteServer interface {
	SendAndClose(*RouteSummary) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type routeServiceGetRecordRouteServer struct {
	grpc.ServerStream
}

func (x *routeServiceGetRecordRouteServer) SendAndClose(m *RouteSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeServiceGetRecordRouteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteService_GetRouteChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteServiceServer).GetRouteChat(&routeServiceGetRouteChatServer{stream})
}

type RouteService_GetRouteChatServer interface {
	Send(*RouteNote) error
	Recv() (*RouteNote, error)
	grpc.ServerStream
}

type routeServiceGetRouteChatServer struct {
	grpc.ServerStream
}

func (x *routeServiceGetRouteChatServer) Send(m *RouteNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeServiceGetRouteChatServer) Recv() (*RouteNote, error) {
	m := new(RouteNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteService_ServiceDesc is the grpc.ServiceDesc for RouteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RouteService",
	HandlerType: (*RouteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _RouteService_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFeatures",
			Handler:       _RouteService_ListFeatures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetRecordRoute",
			Handler:       _RouteService_GetRecordRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetRouteChat",
			Handler:       _RouteService_GetRouteChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/route_guide.proto",
}
